// Quando a extens√£o √© instalada/atualizada
chrome.runtime.onInstalled.addListener((details) => {
    console.log('üéâ Assistente de Atendimento instalado!');

    if (details.reason === 'install') {
        // Primeira instala√ß√£o
        console.log('‚ú® Primeira instala√ß√£o da extens√£o');

        // Abre p√°gina de boas-vindas (opcional)
        // chrome.tabs.create({ url: 'welcome.html' });

    } else if (details.reason === 'update') {
        // Atualiza√ß√£o da extens√£o
        console.log('üîÑ Extens√£o atualizada para vers√£o:', chrome.runtime.getManifest().version);
    }
});

// =============================================
// COMUNICA√á√ÉO ENTRE SCRIPTS
// =============================================

// Escuta mensagens de outros scripts
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log('üì® Mensagem recebida no background:', message);

    // Aqui voc√™ pode adicionar l√≥gica para diferentes tipos de mensagem
    switch (message.type) {
        case 'GET_COMMANDS':
            // Retorna comandos salvos se necess√°rio
            chrome.storage.sync.get(['quickCommands']).then((result) => {
                sendResponse({ commands: result.quickCommands || {} });
            });
            return true; // Indica resposta ass√≠ncrona

        case 'LOG_USAGE':
            // Log de uso de comandos (opcional para estat√≠sticas)
            console.log('üìä Comando usado:', message.command);
            break;

        default:
            console.log('‚ùì Tipo de mensagem desconhecido:', message.type);
    }
});

// =============================================
// GERENCIAMENTO DE STORAGE
// =============================================

// Monitora mudan√ßas no storage (opcional)
chrome.storage.onChanged.addListener((changes, namespace) => {
    if (namespace === 'sync' && changes.quickCommands) {
        console.log('üíæ Comandos alterados no storage');

        // Notifica todas as abas ativas sobre mudan√ßas (se necess√°rio)
        chrome.tabs.query({}, (tabs) => {
            tabs.forEach((tab) => {
                chrome.tabs.sendMessage(tab.id, {
                    type: 'COMMANDS_UPDATED',
                    commands: changes.quickCommands.newValue || {}
                }).catch(() => {
                    // Ignora erros (abas sem content script)
                });
            });
        });
    }
});

// =============================================
// UTILIT√ÅRIOS
// =============================================

// Fun√ß√£o para obter estat√≠sticas (opcional)
async function getUsageStats() {
    try {
        const result = await chrome.storage.sync.get(['usageStats']);
        return result.usageStats || {};
    } catch (error) {
        console.error('Erro ao obter estat√≠sticas:', error);
        return {};
    }
}

// Fun√ß√£o para limpar dados antigos (opcional)
async function cleanupOldData() {
    try {
        // Remove dados muito antigos se necess√°rio
        const result = await chrome.storage.sync.get();
        console.log('üìä Dados atuais no storage:', Object.keys(result));
    } catch (error) {
        console.error('Erro ao limpar dados:', error);
    }
}

// =============================================
// INICIALIZA√á√ÉO DO SERVICE WORKER
// =============================================

console.log('üîß Background service worker iniciado');